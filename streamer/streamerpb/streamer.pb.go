// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamer.proto

package streamer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b26ab11ddf9501b, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Milestone struct {
	Volume               int64    `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Milestone) Reset()         { *m = Milestone{} }
func (m *Milestone) String() string { return proto.CompactTextString(m) }
func (*Milestone) ProtoMessage()    {}
func (*Milestone) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b26ab11ddf9501b, []int{1}
}

func (m *Milestone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Milestone.Unmarshal(m, b)
}
func (m *Milestone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Milestone.Marshal(b, m, deterministic)
}
func (m *Milestone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Milestone.Merge(m, src)
}
func (m *Milestone) XXX_Size() int {
	return xxx_messageInfo_Milestone.Size(m)
}
func (m *Milestone) XXX_DiscardUnknown() {
	xxx_messageInfo_Milestone.DiscardUnknown(m)
}

var xxx_messageInfo_Milestone proto.InternalMessageInfo

func (m *Milestone) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Milestone)(nil), "Milestone")
}

func init() { proto.RegisterFile("streamer.proto", fileDescriptor_8b26ab11ddf9501b) }

var fileDescriptor_8b26ab11ddf9501b = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0x4d, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x62, 0xe7, 0x62, 0x75, 0xcd,
	0x2d, 0x28, 0xa9, 0x54, 0x52, 0xe6, 0xe2, 0xf4, 0xcd, 0xcc, 0x49, 0x2d, 0x2e, 0xc9, 0xcf, 0x4b,
	0x15, 0x12, 0xe3, 0x62, 0x2b, 0xcb, 0xcf, 0x29, 0xcd, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x0e, 0x82, 0xf2, 0x8c, 0x4c, 0xb9, 0x38, 0x82, 0xa1, 0xfa, 0x85, 0x34, 0xb9, 0xf8, 0x21, 0x6c,
	0x84, 0x36, 0x36, 0x3d, 0xb0, 0x59, 0x52, 0x5c, 0x7a, 0x70, 0x31, 0x25, 0x06, 0x03, 0xc6, 0x24,
	0x36, 0xb0, 0x5d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x8e, 0xdd, 0x1b, 0x7d, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamerClient interface {
	StreamMilestone(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Streamer_StreamMilestoneClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) StreamMilestone(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Streamer_StreamMilestoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streamer_serviceDesc.Streams[0], "/Streamer/StreamMilestone", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerStreamMilestoneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_StreamMilestoneClient interface {
	Recv() (*Milestone, error)
	grpc.ClientStream
}

type streamerStreamMilestoneClient struct {
	grpc.ClientStream
}

func (x *streamerStreamMilestoneClient) Recv() (*Milestone, error) {
	m := new(Milestone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
type StreamerServer interface {
	StreamMilestone(*Empty, Streamer_StreamMilestoneServer) error
}

// UnimplementedStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (*UnimplementedStreamerServer) StreamMilestone(req *Empty, srv Streamer_StreamMilestoneServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMilestone not implemented")
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_StreamMilestone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).StreamMilestone(m, &streamerStreamMilestoneServer{stream})
}

type Streamer_StreamMilestoneServer interface {
	Send(*Milestone) error
	grpc.ServerStream
}

type streamerStreamMilestoneServer struct {
	grpc.ServerStream
}

func (x *streamerStreamMilestoneServer) Send(m *Milestone) error {
	return x.ServerStream.SendMsg(m)
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMilestone",
			Handler:       _Streamer_StreamMilestone_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamer.proto",
}
